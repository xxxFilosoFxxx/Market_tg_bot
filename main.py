import logging
import uuid
import typing
import config

from aiogram import Bot, Dispatcher, executor, types, md
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import MessageNotModified, Throttled

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.API_TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

CATALOG = (('–ü–µ—Ä–≤—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü', 'sub'),  # prod_1
           ('–í—Ç–æ—Ä–æ–π –ø—Ä–æ–¥–∞–≤–µ—Ü', 'sub'),
           ('–¢—Ä–µ—Ç–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü', 'sub')
           )


POSTS = {
    str(uuid.uuid4()): {
        'title': 'üìñ–ò–Ω—Å—Ç–∫—Ä—É–∫—Ü–∏—è –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é',
        'body': '‚òëÔ∏è–ú—ã —Å–æ–±—Ä–∞–ª–∏ <b>–ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å–∞–º—ã—Ö –∫—Ä—É—Ç—ã—Ö —É—Å–ª—É–≥</b> –∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ Telegram.\n\n'
                '‚òëÔ∏è–î–ª—è —Ç–æ–≥–æ,—á—Ç–æ –±—ã –≤–∞–º <b>–ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏</b> –ø—Ä–æ —É—Å–ª—É–≥—É-–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n'
                '‚òëÔ∏è–í—Å–µ –ø—Ä–æ–¥–∞–≤—Ü—ã <b>–∏–º–µ—é—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é</b> –∏ –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ –æ—Ç–∑—ã–≤—ã.\n\n'
                '‚òëÔ∏è–ï—Å–ª–∏ —É –≤–∞—Å <b>–≤—ã—à–ª–æ –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ</b> —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤-–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ë–û–¢–ê.\n\n'
                '‚òëÔ∏è–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ  —É—Å–ª—É–≥–∞–º–∏ <b>–Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç –∑–∞–∫–æ–Ω–æ–≤ –†–§</b>.\n\n'
                '‚òëÔ∏è–ü–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º <b>–ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å</b> —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ë–û–¢–ê.',
        'banner': config.BANNERS['banner_4'],
        'keys': (('üîç–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –∏ —Ç–æ–≤–∞—Ä–æ–≤', 'catalog'), ('üí∞–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'sub'))
    },
    str(uuid.uuid4()): {
        'title': 'üîç–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –∏ —Ç–æ–≤–∞—Ä–æ–≤',
        'body': '‚ö†Ô∏è–¢—É—Ç —Å–æ–±—Ä–∞–Ω—ã –ª—É—á—à–∏–µ –∏ –Ω–∞–¥–µ–∂–¥—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã —Å–∞–º—ã—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–ª—É–≥.\n\n'
                'üëÅ–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –∫–∞–∂–¥–æ–≥–æ-–æ–Ω –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è.\n\n'
                '‚ùì–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å-–ø–∏—à–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ!\n\n'
                '‚ôªÔ∏è–ú—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏—â–µ–º –¥–ª—è –≤–∞—Å –Ω–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –±–æ—Ç–∞',
        'banner': config.BANNERS['banner_5'],
        'keys': CATALOG
    },
    str(uuid.uuid4()): {
        'title': 'üì©–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É',
        'body': 'üìé –ü–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –∂–∞–ª–æ–±—ã –ø—Ä–æ—Å–∏–º –í–∞—Å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.\n\n'
                '‚ùóÔ∏è–ñ–∞–ª–æ–±–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ —Ç–µ—Ö —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ –æ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.',
        'banner': config.BANNERS['banner_6'],
        'keys': (('–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã', 'complaint_rules'), ('üìÑ–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É', 'contact'))
    },
    str(uuid.uuid4()): {
        'title': 'üõ°–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7',
        'body': '‚òëÔ∏è–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ '
                '–ø—Ä–æ–¥–∞–≤—Ü–∞–º –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —É—Å–ª—É–≥ –≤ –±–æ—Ç–µ - –ø–∏—à–∏—Ç–µ @{}'.format(config.MANE_CONTACT),
        'banner': config.BANNERS['banner_7'],
        'keys': (('üí¨–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', 'contact'), ('üîç–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –∏ —Ç–æ–≤–∞—Ä–æ–≤', 'catalog'))
    },
    str(uuid.uuid4()): {
        'title': '‚öîÔ∏è–°—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º',
        'body': 'üì¨ –ê–Ω–∫–µ—Ç–∞\n'
                '‚îî  –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ —Ñ–æ—Ä–º–µ.\n\n'
                'üìù –§–æ—Ä–º–∞\n'
                '‚îî –ß—Ç–æ –í—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å?\n'
                '‚îî –ö–∞–∫ –¥–∞–≤–Ω–æ –í—ã –≤ —Å–≤–æ–µ–π —Å—Ñ–µ—Ä–µ?\n'
                '‚îî –ï—Å—Ç—å –ø–æ—Ä—É—á–∏—Ç–µ–ª—å/–æ—Ç–≤–µ—Ç—á–∏–∫?\n'
                '‚îî –û—Ç–∑—ã–≤—ã —Å—é–¥–∞ –∏–ª–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n'
                '‚îî –ü—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö?\n'
                '‚îî –í–µ—Ç–∫–∏ –Ω–∞ —Ñ–æ—Ä—É–º–∞—Ö (—Å—Å—ã–ª–∫–∏)\n\n'
                '‚ö†Ô∏è  –ü—Ä–∏—Å—ã–ª–∞—Ç—å –∞–Ω–∫–µ—Ç—É 1 —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n'
                '‚îî‚ùóÔ∏è –ë–µ–∑ –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–µ—Ç–æ–∫ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫—É',
        'banner': config.BANNERS['avatar'],
        'keys': (('üìù–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É', 'contact'), )
    },
    str(uuid.uuid4()): {
        'title': 'üåé–ù–∞—à MARKETPLACE',
        'body': '<b>–õ—É—á—à–∞—è</b> –¥–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ Telegram.\n\n'
                '–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –º–æ–∂–µ—Ç –∫–∞–∂–¥—ã–π,'
                '—É –∫–æ–≥–æ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.\n\n'
                '–ó–∞—Ö–æ–¥–∏ - –∏–∑—É—á–∞–π!\n'
                '{}'.format(config.URL_CHAT),
        'banner': config.BANNERS['avatar'],
        'keys': (('üí¨–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', 'contact'), )
    }
}

posts_cb = CallbackData('post', 'id', 'action')  # post:<id>:<action>


def add_keyboard_markup(text_and_data, row_width: int) -> types.InlineKeyboardMarkup:
    keyboard_markup = types.InlineKeyboardMarkup(row_width=row_width)
    row_buttons = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
    keyboard_markup.add(*row_buttons)
    return keyboard_markup


def get_keyboard() -> types.InlineKeyboardMarkup:
    keyboard_markup = types.InlineKeyboardMarkup()
    for post_id, post in POSTS.items():
        keyboard_markup.add(
            types.InlineKeyboardButton(
                post['title'],
                callback_data=posts_cb.new(id=post_id, action='view')),
        )
    return keyboard_markup


def format_post(post_id: str, post: dict, row_width: int) -> (str, types.InlineKeyboardMarkup):
    text = md.text(
        md.hbold(post['title']),
        '',
        md.text(post['body']),
        sep='\n',
    )
    keyboard_markup = types.InlineKeyboardMarkup(row_width=row_width)
    row_buttons = (types.InlineKeyboardButton(post_text, callback_data=posts_cb.new(id=post_id, action=data))
                   for post_text, data in post['keys'] if data != 'contact')
    keyboard_markup.add(*row_buttons)
    for post_text, data in post['keys']:
        if data == 'contact':
            keyboard_markup.add(types.InlineKeyboardButton(post_text, url=config.URL_MANE_CONTACT))
    keyboard_markup.add(types.InlineKeyboardButton('üîó–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é',
                                                   callback_data=posts_cb.new(id='-', action='list')))
    return text, keyboard_markup


@dp.message_handler(commands='start')
async def start_cmd_handler(message: types.Message):
    text_and_data = (('–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏', 'read_the_rules_1'),)
    keyboard_markup = add_keyboard_markup(text_and_data, 1)
    text_for_agreement = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å {config.APP_NAME}'
    await bot.send_photo(message.from_user.id, photo=config.BANNERS['banner_2'], caption=text_for_agreement,
                         reply_markup=keyboard_markup)


@dp.callback_query_handler(text='repeat')
async def repeat_callback_handler(query: types.CallbackQuery):
    text_and_data = (('–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏', 'read_the_rules_1'),)
    keyboard_markup = add_keyboard_markup(text_and_data, 1)
    text_for_agreement = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å {config.APP_NAME}'
    await query.message.edit_media(media=types.InputMedia(media=config.BANNERS['banner_2']))
    await query.message.edit_caption(caption=text_for_agreement, reply_markup=keyboard_markup)


@dp.callback_query_handler(text='read_the_rules_1')
async def inline_agree_answer_callback_handler_1(query: types.CallbackQuery):
    text_and_data = (('–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ', 'read_the_rules_2'),)
    keyboard_markup = add_keyboard_markup(text_and_data, 1)
    text_for_agreement = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ë–æ—Ç–∞ ¬´{}¬ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –í–∞–º –¥–æ—Å—Ç—É–ø –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ë–æ—Ç–∞ –∏ –µ–≥–æ ' \
                         '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–∞ —É—Å–ª–æ–≤–∏—è—Ö, —è–≤–ª—è—é—â–∏—Ö—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–º –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ü—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ë–æ—Ç–æ–º.\n\n' \
                         '–í —ç—Ç–æ–π —Å–≤—è–∑–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ü—Ä–∞–≤–∏–ª, ' \
                         '–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ë–æ—Ç–∞ –∫–∞–∫ –ø—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç. 437 ' \
                         '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏.\n\n' \
                         '‚ö†Ô∏è –ü—Ä–∏—Å—Ç—É–ø–∞—è –∫ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ë–æ—Ç–æ–º, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –Ω–∏–∂–µ—Å–ª–µ–¥—É—é—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n\n' \
                         '‚Äî –ë–æ—Ç –Ω–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –ó–∞ –¥–µ–π—Å—Ç–≤–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è ' \
                         '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–µ—Å—ë—Ç'.format(config.APP_NAME)
    await query.message.edit_media(media=types.InputMedia(media=config.BANNERS['banner_1']))
    await query.message.edit_caption(caption=text_for_agreement, reply_markup=keyboard_markup)


@dp.callback_query_handler(text='read_the_rules_2')
async def inline_agree_answer_callback_handler_2(query: types.CallbackQuery):
    text_and_data = (('–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ', 'read_the_rules_3'),)
    keyboard_markup = add_keyboard_markup(text_and_data, 1)
    text_for_agreement = '‚Äî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ë–æ—Ç–∞ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∑–∞—â–∏—â–∞—Ç—å —á–µ—Å—Ç—å –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ' \
                         '–∏ –æ–≥—Ä–∞–∂–¥–∞—Ç—å –∏—Ö –æ—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π –ü—Ä–∞–≤–∏–ª –ø—É—Ç—ë–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–∞–∫–æ–≤—ã–º –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–æ—Ç—É, ' \
                         '–≤–ø–ª–æ—Ç—å –¥–æ –ø–µ—Ä–µ–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ ¬´Telegram¬ª\n\n' \
                         '‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ—Å—ë—Ç –ª–∏—á–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ä–∞–∑–º–µ—â–∞–µ—Ç –≤ –ë–æ—Ç–µ, ' \
                         '—Å–æ–æ–±—â–∞–µ—Ç –¥—Ä—É–≥–∏–º –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∞ —Ç–∞–∫–∂–µ –∑–∞ –ª—é–±—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, ' \
                         '–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º—ã–µ –Ω–∞ —Å–≤–æ–π —Ä–∏—Å–∫\n\n' \
                         '‚Äî –í —Å–ª—É—á–∞–µ –Ω–µ—Å–æ–≥–ª–∞—Å–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –ü—Ä–∞–≤–∏–ª–∞–º–∏ –∏–ª–∏ –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏,  ' \
                         '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ë–æ—Ç–∞, –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–≤ –æ–± —ç—Ç–æ–º ' \
                         '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é –ë–æ—Ç–∞ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ'
    await query.message.edit_caption(caption=text_for_agreement, reply_markup=keyboard_markup)


@dp.callback_query_handler(text='read_the_rules_3')
async def inline_agree_answer_callback_handler_3(query: types.CallbackQuery):
    text_and_data = (('‚úÖ–°–æ–≥–ª–∞—à–∞—é—Å—å', posts_cb.new(id='-', action='list')),
                     ('–ü–æ–∫–∏–Ω—É—Ç—å —Å–µ—Ä–≤–∏—Å', 'repeat'),)
    keyboard_markup = add_keyboard_markup(text_and_data, 2)
    text_for_agreement = '‚Äî –í—Å–µ –æ–±—ä–µ–∫—Ç—ã, —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≤ –ë–æ—Ç–µ, –≤ —Ç–æ–º —á–∏—Å–ª–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞, —Ç–µ–∫—Å—Ç, –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ ' \
                         '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏, —Å–∫—Ä–∏–ø—Ç—ã, –ø—Ä–æ–≥—Ä–∞–º–º—ã, –º—É–∑—ã–∫–∞, –∑–≤—É–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã –∏ –∏—Ö ' \
                         '–ø–æ–¥–±–æ—Ä–∫–∏, —è–≤–ª—è—é—Ç—Å—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–≤ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–π, ' \
                         '–≤—Å–µ –ø—Ä–∞–≤–∞ –Ω–∞ —ç—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –∑–∞—â–∏—â–µ–Ω—ã\n\n' \
                         '‚Äî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ë–æ—Ç–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–ª—É—á–∞–µ –ø–æ—Ç–µ—Ä–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ' \
                         '—Ü–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ –∫—Ç–æ-–ª–∏–±–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ë–æ—Ç–∞,  –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç –ø–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏ —É ' \
                         '–¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ë–æ—Ç–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ì–∞—Ä–∞–Ω—Ç-—Å–µ—Ä–≤–∏—Å–∞ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ë–æ—Ç–∞.\n\n' \
                         '‚ö†Ô∏è –ü–æ–ª—å–∑—É—è—Å—å –ë–æ—Ç–æ–º ¬´{}¬ª, –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –°–æ–≥–ª–∞—à–µ–Ω–∏—è –≤ –ø–æ–ª–Ω–æ–º ' \
                         '–æ–±—ä—ë–º–µ.'.format(config.APP_NAME)
    # TODO: –ø—Ä–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–∏ –∏/–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–µ –∑–∞–∫–∏–¥—ã–≤–∞—Ç—å –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∞—Ç–∞) –≤ –ë–î
    await query.message.edit_caption(caption=text_for_agreement, reply_markup=keyboard_markup)


@dp.callback_query_handler(posts_cb.filter(action='view'))
async def query_view(query: types.CallbackQuery, callback_data: typing.Dict[str, str]):
    post_id = callback_data['id']

    post = POSTS.get(post_id, None)
    if not post:
        return await query.answer('–û—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!')

    text, keyboard_markup = format_post(post_id, post, 1)
    await query.message.edit_media(media=types.InputMedia(media=post['banner']))
    await query.message.edit_caption(caption=text, reply_markup=keyboard_markup)


@dp.callback_query_handler(posts_cb.filter(action='list'))
async def query_show_list(query: types.CallbackQuery):
    await query.message.edit_media(media=types.InputMedia(media=config.BANNERS['banner_3']))
    await query.message.edit_caption(caption='üëã–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ {}.\n\n'
                                             'üëÄ–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É!'.format(config.APP_NAME),
                                     reply_markup=get_keyboard())


@dp.callback_query_handler(posts_cb.filter(action='sub'))  # ['prod_1', 'prod_2', 'prod_3']
async def query_show_sub(query: types.CallbackQuery):
    # text_and_data = (('–û–ø–ª–∞—Ç–∏—Ç—å', 'pay_sub'),)
    # keyboard_markup = add_keyboard_markup(text_and_data, 1)
    keyboard_markup = types.InlineKeyboardMarkup()
    keyboard_markup.add(types.InlineKeyboardButton('üí∞–û–ø–ª–∞—Ç–∏—Ç—å', url=config.URL_MANE_CONTACT))
    keyboard_markup.add(types.InlineKeyboardButton('üîó–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é',
                                                   callback_data=posts_cb.new(id='-', action='list')))
    text = 'üö∏–ú—ã —Å—Ç–∞—Ä–∞–ª–∏—Å—å –∏ –¥–µ–ª–∞–ª–∏ –¥–ª—è –≤–∞—Å —ç—Ç–æ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –±–æ–ª—å—à–µ ' \
           '–Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å –∑–∞ –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ!\n\n' \
           '‚ö†Ô∏è–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n\n' \
           '–ù–∞–∂–º–∏ –Ω–∞ <b>–∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>, –≤–∞–º —Ä–∞—Å—Å–∫–∞–∂—É—Ç –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.'
    await query.message.edit_media(media=types.InputMedia(media=config.BANNERS['banner_8']))
    await query.message.edit_caption(caption=text, reply_markup=keyboard_markup, parse_mode='HTML')


@dp.callback_query_handler(posts_cb.filter(action='complaint_rules'))
async def query_show_rules(query: types.CallbackQuery):
    text = md.text(
        md.hbold('–ñ–∞–ª–æ–±–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞, –µ—Å–ª–∏ –≤–∞—à —Å–ª—É—á–∞–π –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∏–∂–µ:\n\n'),
        md.quote_html('1. –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ö–∏–¥–∞–ª–∞.\n\n'
                      '–ß–µ–ª–æ–≤–µ–∫ –∫–∏–Ω—É–ª –Ω–∞ –¥–µ–Ω—å–≥–∏/—Ç–æ–≤–∞—Ä –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç, –∏–º–µ—é—â–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.\n'
                      '(–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: –ö–∏–¥–æ–∫).\n'
                      '–í –æ–ø–∏—Å–∞–Ω–∏–∏ –∂–∞–ª–æ–±—ã —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É —É—â–µ—Ä–±–∞, –ø—Ä–∏—á–∞—Å—Ç–Ω—ã–µ –ª–∏—Ü–∞, '
                      '–ø—Ä–µ–¥–º–µ—Ç —Å–ø–æ—Ä–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n\n'
                      '2. –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –û—Ç–∫–∞–∑ —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –≥–∞—Ä–∞–Ω—Ç-—Å–µ—Ä–≤–∏—Å!\n\n'
                      '–ß–µ–ª–æ–≤–µ–∫ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –≥–∞—Ä–∞–Ω—Ç-—Å–µ—Ä–≤–∏—Å/–Ω–∞–≤—è–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ–≥–æ –≥–∞—Ä–∞–Ω—Ç–∞, '
                      '–∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –¥–æ–≤–µ—Ä–∏—è —É –∫–ª–∏–µ–Ω—Ç–∞.\n'
                      '(–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: –û—Ç–∫–∞–∑ —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∞).\n'
                      '–í –æ–ø–∏—Å–∞–Ω–∏–∏ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞.')
    )
    keyboard_markup = types.InlineKeyboardMarkup()
    keyboard_markup.add(types.InlineKeyboardButton('üìÑ–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É', url=config.URL_MANE_CONTACT))
    keyboard_markup.add(types.InlineKeyboardButton('üîó–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é',
                                                   callback_data=posts_cb.new(id='-', action='list')))
    await query.message.edit_caption(caption=text, reply_markup=keyboard_markup)


@dp.callback_query_handler(posts_cb.filter(action='catalog'))
async def query_show_catalog(query: types.CallbackQuery, callback_data: typing.Dict[str, str]):
    post_id = callback_data['id']

    post = POSTS.get(post_id, None)
    if not post:
        return await query.answer('–û—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!')

    text = md.text(
        md.hbold('üîç–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –∏ —Ç–æ–≤–∞—Ä–æ–≤\n\n'),
        md.text('‚ö†Ô∏è–¢—É—Ç —Å–æ–±—Ä–∞–Ω—ã –ª—É—á—à–∏–µ –∏ –Ω–∞–¥–µ–∂–¥—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã —Å–∞–º—ã—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–ª—É–≥.\n\n'
                'üëÅ–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –∫–∞–∂–¥–æ–≥–æ-–æ–Ω –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è.\n\n'
                '‚ùì–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å-–ø–∏—à–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ!\n\n'
                '‚ôªÔ∏è–ú—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏—â–µ–º –¥–ª—è –≤–∞—Å –Ω–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –±–æ—Ç–∞',)
    )
    keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
    row_buttons = (types.InlineKeyboardButton(post_text, callback_data=posts_cb.new(id=post_id, action=data))
                   for post_text, data in CATALOG)
    keyboard_markup.add(*row_buttons)
    keyboard_markup.add(types.InlineKeyboardButton('üîó–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é',
                                                   callback_data=posts_cb.new(id='-', action='list')))
    await query.message.edit_media(media=types.InputMedia(media=config.BANNERS['banner_5']))
    await query.message.edit_caption(caption=text, reply_markup=keyboard_markup)


# @dp.callback_query_handler(text='agree')
# async def inline_agree_answer_callback_handler(query: types.CallbackQuery):
#     answer_data = query.data
#     await query.answer(f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ {answer_data!r}')
#     if answer_data == 'agree':
#         text = 'Great, me too!'
#     else:
#         text = f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {answer_data!r}!'
#     await bot.send_message(query.from_user.id, text)


# --------------------------------------------------------


# @dp.callback_query_handler(text='no')
# @dp.callback_query_handler(text='yes')
# async def inline_kb_answer_callback_handler(query: types.CallbackQuery):
#     answer_data = query.data
#     # always answer callback queries, even if you have nothing to say
#     await query.answer(f'You answered with {answer_data!r}')
#
#     if answer_data == 'yes':
#         text = 'Great, me too!'
#     elif answer_data == 'no':
#         text = 'Oh no...Why so?'
#     else:
#         text = f'Unexpected callback data {answer_data!r}!'
#
#     await bot.send_message(query.from_user.id, text)


# @dp.message_handler()
# async def echo(message: types.Message):
#     # old style:
#     # await bot.send_message(message.chat.id, message.text)
#
#     await message.answer(message.text)


# --------------------------------------

# POSTS = {
#     str(uuid.uuid4()): {
#         'title': f'Post {index}',
#         'body': 'Lorem ipsum dolor sit amet, '
#                 'consectetur adipiscing elit, '
#                 'sed do eiusmod tempor incididunt ut '
#                 'labore et dolore magna aliqua',
#         'votes': random.randint(-2, 5),
#     } for index in range(1, 6)
# }
#
# posts_cb = CallbackData('post', 'id', 'action')  # post:<id>:<action>
#
#
# def get_keyboard() -> types.InlineKeyboardMarkup:
#     """
#     Generate keyboard with list of posts
#     """
#     markup = types.InlineKeyboardMarkup()
#     for post_id, post in POSTS.items():
#         markup.add(
#             types.InlineKeyboardButton(
#                 post['title'],
#                 callback_data=posts_cb.new(id=post_id, action='view')),
#         )
#     return markup
#
#
# def format_post(post_id: str, post: dict) -> (str, types.InlineKeyboardMarkup):
#     text = md.text(
#         md.hbold(post['title']),
#         md.quote_html(post['body']),
#         '',  # just new empty line
#         f"Votes: {post['votes']}",
#         sep='\n',
#     )
#
#     markup = types.InlineKeyboardMarkup()
#     markup.row(
#         types.InlineKeyboardButton('üëç', callback_data=posts_cb.new(id=post_id, action='like')),
#         types.InlineKeyboardButton('üëé', callback_data=posts_cb.new(id=post_id, action='dislike')),
#     )
#     markup.add(types.InlineKeyboardButton('<< Back', callback_data=posts_cb.new(id='-', action='list')))
#     return text, markup
#
#
# @dp.message_handler(commands='start')
# async def cmd_start(message: types.Message):
#     await message.reply('Posts', reply_markup=get_keyboard())
#
#
# @dp.callback_query_handler(posts_cb.filter(action='list'))
# async def query_show_list(query: types.CallbackQuery):
#     await query.message.edit_text('Posts', reply_markup=get_keyboard())
#
#
# @dp.callback_query_handler(posts_cb.filter(action='view'))
# async def query_view(query: types.CallbackQuery, callback_data: typing.Dict[str, str]):
#     post_id = callback_data['id']
#
#     post = POSTS.get(post_id, None)
#     if not post:
#         return await query.answer('Unknown post!')
#
#     text, markup = format_post(post_id, post)
#     await query.message.edit_text(text, reply_markup=markup)
#
#
# @dp.callback_query_handler(posts_cb.filter(action=['like', 'dislike']))
# async def query_post_vote(query: types.CallbackQuery, callback_data: typing.Dict[str, str]):
#     try:
#         await dp.throttle('vote', rate=1)
#     except Throttled:
#         return await query.answer('Too many requests.')
#
#     post_id = callback_data['id']
#     action = callback_data['action']
#
#     post = POSTS.get(post_id, None)
#     if not post:
#         return await query.answer('Unknown post!')
#
#     if action == 'like':
#         post['votes'] += 1
#     elif action == 'dislike':
#         post['votes'] -= 1
#
#     await query.answer('Vote accepted')
#     text, markup = format_post(post_id, post)
#     await query.message.edit_text(text, reply_markup=markup)


@dp.errors_handler(exception=MessageNotModified)
async def message_not_modified_handler(update, error):
    return True  # errors_handler must return True if error was handled correctly


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
